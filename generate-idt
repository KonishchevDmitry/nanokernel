#!/usr/bin/env python3
#
# Interrupt Descriptor Table generator
# https://wiki.osdev.org/Interrupt_Descriptor_Table
#

import os

TEMPLATE = """\
; Generated by {generator}, DO NOT EDIT

idt:
    {entries}

idtr:
    idt_size: dw idtr - idt
    idt_base: dd idt

master_pic_start: db {master_pic_start}
slave_pic_start: db {slave_pic_start}

{handlers}
"""

HANDLER_TEMPLATE = """\
{isr_name}:
    cli
    push {irq}
    jmp isr\
"""


def generate(path):
    cpu_interrupts = 20
    reserved_interrupts = 12
    pic_interrupts = 8

    total_interrupts = cpu_interrupts + reserved_interrupts

    master_pic_start = total_interrupts
    total_interrupts += pic_interrupts

    slave_pic_start = total_interrupts
    total_interrupts += pic_interrupts

    present = True
    dpl = 0
    gate_type = 0xE

    flags = (
        present << 7 |
        dpl     << 5 |
        gate_type
    )

    entries = []
    handlers = []

    for irq in range(total_interrupts):
        isr_name = "isr_{}".format(irq)

        entries.append(
            "dw {isr_name}, kernel_code_gdte - gdt, 0x{third_word:04x}, 0x0000".format(
            isr_name=isr_name, third_word=flags << 8))

        handlers.append(HANDLER_TEMPLATE.format(isr_name=isr_name, irq=irq))

    data = TEMPLATE.format(
        generator=os.path.basename(__file__),
        entries="\n    ".join(entries),
        master_pic_start=master_pic_start,
        slave_pic_start=slave_pic_start,
        handlers="\n\n".join(handlers),
    )

    with open(path, "w") as file:
        file.write(data)


if __name__ == "__main__":
    generate(os.path.join(os.path.dirname(__file__), "idt.asm"))