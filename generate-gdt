#!/usr/bin/env python3
#
# Global Descriptor Table generator
# https://wiki.osdev.org/Global_Descriptor_Table
#

import os

class GdtEntry:
    def __init__(self, name, base, limit, *, system, privilege_level):
        self.name = name
        self.base = base
        self.limit = limit
        self.system = system
        self.privilege_level = privilege_level
        self.granularity_4k = True
        self.bits32 = True
        self.bits64 = False
        self.present = True
        self.accessed = False

    def encode(self):
        access = (
            self.present               << 7 |
            self.privilege_level       << 5 |
            (not self.system)          << 4 |
            self.executable            << 3 |
            self.conforming_grows_down << 2 |
            self.readable_writable     << 1 |
            self.accessed              << 0
        )

        flags = (
            self.granularity_4k << 3 |
            self.bits32         << 2 |
            self.bits64         << 1
        )

        data = ", ".join("0x{:04x}".format(gdt_word) for gdt_word in [
            self.limit & 0xFFFF,
            self.base & 0xFFFF,
            access << 8 | (self.base >> 16 & 0xFF),
            (self.base >> 24 & 0xFF) << 8 | flags << 4 | (self.limit >> 16 & 0xF),
        ])

        return "{name}_gdte: dw {data}".format(name=self.name, data=data)


class GdtCodeEntry(GdtEntry):
    def __init__(self, name, base, limit, *, conforming, readable, **kwargs):
        super().__init__(name, base, limit, **kwargs)
        self.executable = True
        self.conforming_grows_down = conforming
        self.readable_writable = readable


class GdtDataEntry(GdtEntry):
    def __init__(self, name, base, limit, *, writable, **kwargs):
        super().__init__(name, base, limit, **kwargs)
        self.executable = False
        self.conforming_grows_down = False
        self.readable_writable = writable


TEMPLATE = """\
; Generated by {generator}, DO NOT EDIT

gdt:
    null_gdte: dw 0x0000, 0x0000, 0x0000, 0x0000
    {entries}

gdtr:
    gdt_size: dw gdtr - gdt
    gdt_base: dd gdt
"""

def generate(path):
    encoded_entries = [entry.encode() for entry in [
        GdtCodeEntry("kernel_code", 0, 0xFFFFF, system=False, readable=True, conforming=False, privilege_level=0),
        GdtDataEntry("kernel_data", 0, 0xFFFFF, system=False, writable=True, privilege_level=0),
        GdtCodeEntry("user_code",   0, 0xFFFFF, system=False, readable=True, conforming=False, privilege_level=3),
        GdtDataEntry("user_data",   0, 0xFFFFF, system=False, writable=True, privilege_level=3),
    ]]

    data = TEMPLATE.format(
        generator=os.path.basename(__file__),
        entries="\n    ".join(encoded_entries),
    )

    with open(path, "w") as file:
        file.write(data)

if __name__ == "__main__":
    generate(os.path.join(os.path.dirname(__file__), "gdt.asm"))